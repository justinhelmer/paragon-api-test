const config = require('./config');
const express = require('express');
const fs = require('fs');
const server = express();
const path = require('path');

const globalContext = {
  title: config.title
};

const indexHTML = fs.readFileSync(path.resolve(__dirname, './src/index.html'), 'utf8');

server.use('/dist', express.static('dist'));

config.ssr ? attachRoutesWithSSREnabled() : attachRoutesWithSSRDisabled();

server.listen(process.env.PORT || 3000);

/**
 * With SSR disabled, the empty (but compiled) index.html file will be served on every request.
 *
 * Uses the compile logic that vue-server-render uses internally. Both the same compile library (lodash.template)
 * and the same compile options are being used. @see vue-server-renderer/build.js - parseTemplate().
 *
 * In addition, appends '<div id="app"></div>' to the HTML body.
 *     - With SSR enabled, this root element is injected by the vue-server-render when src/main.server.js
 *       loads src/core/app. This in-turn loads App.vue which has the <div id="app"></div> wrapper.
 *     - With SSR disabled, src/main.client.js will attempt to mount to #app, so it therefore must exist.
 *
 * This function is intended to be called only once when the server is started, due to its high computation.
 *
 * @see vue-server-renderer/build.js - parseTemplate().
 */
function attachRoutesWithSSRDisabled() {
  const compile = require('lodash.template');

  const compileOptions = {
    escape: /{{([^{][\s\S]+?[^}])}}/g,
    interpolate: /{{{([\s\S]+?)}}}/g
  };

  const closure = indexHTML.indexOf('</body>');
  const head = indexHTML.substr(0, closure); // everything up to the closing body tag
  const neck = '<div id="app"></div>';
  const tail = indexHTML.substr(closure); // everything after the closing body tag

  const compiledIndexHTML = compile(head + neck + tail, compileOptions)(globalContext);

  server.get('*', (req, res) => res.end(compiledIndexHTML));
}

/**
 * With SSR enabled, vue-server-renderer will render the entire content in <!--vue-ssr-outlet--> of index.html
 *
 * The renderer uses the server bundle generated by webpack.server.config.js.
 * createApp() generates a new application context. @see https://ssr.vuejs.org/en/structure.html
 * The entry point for the app (i.e. createApp) is located at src/main.server.js
 * Note that this entry point is different for the client (src/main.client.js)
 *
 * @see https://ssr.vuejs.org/en/structure.html
 * @see ./src/main.server.js
 */
function attachRoutesWithSSREnabled() {
  const renderer = require('vue-server-renderer').createRenderer({
    template: indexHTML
  });

  const createApp = require('./dist/server.bundle.js').default;

  server.get('*', (req, res) => {
    const context = Object.assign({}, globalContext, {
      url: req.url
    });

    createApp(context)
        .then(app => {
          renderer.renderToString(app, context, (err, html) => {
            if (err) {
              if (err.code === 404) {
                res.status(404).end('Page not found');
              } else {
                res.status(500).end('Internal Server Error');
              }
            } else {
              res.end(html);
            }
          })
        })
        .catch(err => {
          console.error('ERR:', '-', req.url, err);
        });
  });
}