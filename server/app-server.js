/**
 * The application server.
 *
 * The entry point for the app is the instance exported by src/main.server.js. It is loaded through the server bundle
 * generated by webpack.server.config.js (vue-ssr-server-bundle.json).
 *
 * Uses the bundle renderer from vue-server-renderer to render the entire content in <!--vue-ssr-outlet--> of index.html.
 * Uses a client manifest (created by webpack.client.config.js) to allow for preloading and prefetching of priority assets.
 *
 * @see https://ssr.vuejs.org/en/bundle-renderer.html
 * @see https://ssr.vuejs.org/en/build-config.html
 * @see src/main.server.js
 */

const config = require('../config');
const fs = require('fs');
const LRU = require('lru-cache');
const path = require('path');

const resolve = file => path.resolve(__dirname, file);

module.exports = function (server) {
  const template = fs.readFileSync(resolve('../src/index.html'), 'utf8');

  const {createBundleRenderer} = require('vue-server-renderer');
  const serverBundle = require('../dist/vue-ssr-server-bundle.json');
  const clientManifest = require('../dist/vue-ssr-client-manifest.json');

  const renderer = createBundleRenderer(serverBundle, {
    template,
    clientManifest,

    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),

    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('../dist'),

    // recommended for performance
    runInNewContext: false,

  });

  server.get('*', (req, res) => {
    const context = Object.assign({}, config.template || {}, {
      url: req.url
    });

    renderer.renderToString(context, (err, html) => {
      if (err) {
        if (err.code === 404) {
          res.status(404).end('Page not found');
        } else {
          res.status(500).end('Internal Server Error');
        }
      } else {
        res.end(html);
      }
    });
  });
};