/**
 * The main entry point for the client.
 *
 * A /dist/main.js is generated by webpack.config.config.js and loaded via index.html.
 *
 * If SSR is enabled, the server will use main.server.js as its entry point. All async data requests are pre-fetched
 * in order to make SSR possible. The results of the pre-fetched requests are stored in the shared data store
 * located at core/store.js.
 *
 * When the client first loads the page that has been fully rendered by the server, the shared data store will be
 * available in window.__INITIAL_STATE__. Use this initial state to bootstrap the client's data store.
 *
 * @see /index.js - serveAppWithSSREnabled()
 * @see ./src/main.server.js
 * @see ./src/core/store.js
 */
import $ from 'jquery';
import { createApp } from './core/app';
const { app, router, store } = createApp();

if (window.__INITIAL_STATE__) {
  store.replaceState(window.__INITIAL_STATE__);
}

router.onReady(() => {
  // Add router hook for handling asyncData.
  // Doing it after initial route is resolved so that we don't double-fetch
  // the data that we already have (if SSR is enabled).
  // Using router.beforeResolve() so that all async components are resolved.
  router.beforeResolve((to, from, next) => {
    const matchedComponents = router.getMatchedComponents(to);
    const prevMatchedComponents = router.getMatchedComponents(from);

    // we only care about none-previously-rendered components,
    // so we compare them until the two matched lists differ
    let diffed = false;
    const activatedComponents = matchedComponents.filter((component, i) => {
      return diffed || (diffed = (prevMatchedComponents[i] !== component));
    });

    if (!activatedComponents.length) {
      return next();
    }

    $('body').append('<div id="loader">LOADING...</div>');

    Promise.all(activatedComponents.map(Component => {
      if (Component.asyncData) {
        return Component.asyncData({ store, route: to });
      }
    })).then(() => {
      $('#loader').remove();

      next();
    }).catch(next)
  });

  app.$mount('#app');
});
